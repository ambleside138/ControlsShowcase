<controls:MetroWindow x:Class="ControlsShowcase.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
        xmlns:controls="http://schemes.grabacr.net/winfx/2014/controls"
        xmlns:v="clr-namespace:ControlsShowcase.Views"
        xmlns:vm="clr-namespace:ControlsShowcase.ViewModels"
                      Background="{DynamicResource ThemeBrushKey}"
					  Foreground="{DynamicResource ActiveForegroundBrushKey}"
        Title="MainWindow" Height="350" Width="525">

    <controls:MetroWindow.Resources>
        <Style x:Key="StretchExpanderStyleKey2" TargetType="{x:Type Expander}" >
            <Setter Property="OverridesDefaultStyle"
				Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Expander}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <controls:ExpanderButton x:Name="ExpanderButton"
												 Direction="Right"
                                                 Background="Green"
												 IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            </controls:ExpanderButton>

                            <ContentPresenter Grid.Column="1"
                                              ContentSource="Header"
                                              HorizontalAlignment="Stretch"
											  RecognizesAccessKey="True" />

                            <ContentPresenter x:Name="Content"
                                              Grid.ColumnSpan="2"
										  Grid.Row="1"
										  Margin="{TemplateBinding Padding}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded"
								 Value="False">
                                <Setter TargetName="Content"
									Property="Visibility"
									Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <DataTemplate x:Key="ListBoxItemTemplateKey">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="0.4*" SharedSizeGroup="ID" />
                    <ColumnDefinition Width="0.2*" SharedSizeGroup="NAME" />
                    <ColumnDefinition Width="0.6*" />
                </Grid.ColumnDefinitions>

                <TextBlock Text="{Binding Id}" />

                <TextBox Grid.Column="1" Text="{Binding Name}"/>

                <TextBox Grid.Column="2" Text="{Binding Memo}" />
            </Grid>
        </DataTemplate>
    </controls:MetroWindow.Resources>
    
    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>
    
    <i:Interaction.Triggers>
    
    	<!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
    	<!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
    	<!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています --> 
        
        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize"/>
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction/>
        </i:EventTrigger>

        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->

    </i:Interaction.Triggers>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="23" />
        </Grid.RowDefinitions>

        <Border Grid.Row="0"
				controls:MetroWindow.IsCaptionBar="True">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <controls:CaptionIcon Grid.Column="0">
                    <Ellipse Width="18"
							 Height="18"
							 Fill="{DynamicResource ActiveForegroundBrushKey}" />
                </controls:CaptionIcon>
                <TextBlock Grid.Column="1"
						   Text="ControlsShowcase"
						   TextTrimming="CharacterEllipsis"
						   Foreground="{DynamicResource ForegroundBrushKey}"
						   FontFamily="Segoe UI Light"
						   FontSize="18"
						   Margin="3,0,0,0"
						   VerticalAlignment="Center" />
                <controls:SystemButtons Grid.Column="2"
										VerticalAlignment="Top" />
            </Grid>
        </Border>

        <TabControl Grid.Row="1"
                    Style="{StaticResource VerticalTabControlStyleKey}">
            <TabItem Header="Expander">
                <StackPanel Margin="8">
                    <TextBlock Text="Stretchしてくれない" />
                    <Expander>
                        <Expander.Header>
                            <Border BorderBrush="Red"
                                BorderThickness="1"
                                HorizontalAlignment="Stretch">
                                <TextBlock Text="TEST" />
                            </Border>
                        </Expander.Header>

                        <Expander.Content>
                            <StackPanel>
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                            </StackPanel>
                        </Expander.Content>
                    </Expander>

                    <TextBlock Text="Stretchする" />
                    <Expander Style="{StaticResource StretchExpanderStyleKey2}">
                        <Expander.Header>
                            <Border BorderBrush="Red"
                                BorderThickness="1"
                                HorizontalAlignment="Stretch">
                                <TextBlock Text="TEST" />
                            </Border>
                        </Expander.Header>

                        <Expander.Content>
                            <StackPanel>
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                                <TextBlock Text="Content" />
                            </StackPanel>
                        </Expander.Content>
                    </Expander>
                </StackPanel>

            </TabItem>
            <!--Expander END-->
            
            
            <!--ListBox-->
            <TabItem Header="ListBox">
                <ScrollViewer Margin="8">
                    <StackPanel Width="300" HorizontalAlignment="Left">
                        <TextBlock Text="Gridレイアウトが崩れる件" />
                        <TextBlock Text="ListBoxItem内でGridパネルを使用すると×" Margin="0,16,0,0" />
                        <ListBox ItemsSource="{Binding Staffs}"
                                 ItemTemplate="{StaticResource ListBoxItemTemplateKey}">

                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                        </ListBox>

                        <TextBlock Text="ItemsControlなら崩れない"  Margin="0,16,0,0"/>
                        <ItemsControl ItemsSource="{Binding Staffs}"
                             ItemTemplate="{StaticResource ListBoxItemTemplateKey}">

                        </ItemsControl>

                        <TextBlock Text="IsSharedColumn=Trueの動き"  Margin="0,16,0,0"/>
                        <ListBox ItemsSource="{Binding Staffs}"
                                 ItemTemplate="{StaticResource ListBoxItemTemplateKey}"
                                 Grid.IsSharedSizeScope="True">

                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem">
                                    <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>
                        </ListBox>

                    </StackPanel>

                </ScrollViewer>

            </TabItem>
        </TabControl>

        <!--Footer-->
        <Grid Grid.Row="2"
			  Background="{DynamicResource AccentBrushKey}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <controls:ResizeGrip Grid.Column="1" />
        </Grid>
    </Grid>

</controls:MetroWindow>
