<UserControl x:Class="ControlsShowcase.Views.AvalonDockContainer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ControlsShowcase.Views"
             xmlns:vm="clr-namespace:ControlsShowcase.ViewModels"
             xmlns:b="clr-namespace:ControlsShowcase.Behaviors.Messaging"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.DataContext>
        <vm:AvalonDockContainerViewModel />
    </UserControl.DataContext>
    
    <i:Interaction.Triggers>
        <!--LivetのAction-->
        <l:InteractionMessageTrigger MessageKey="ShowCommand" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション -->
            <!-- AvalonDockでフローティングウィンドウ化されているときはInvokeActionOnlyWhenWindowIsActive=FalseにしないとInvokeされなくなる -->
            <l:TransitionInteractionMessageAction WindowType="{x:Type local:ChildWindow}"
                                                  InvokeActionOnlyWhenWindowIsActive="False"
                                                  Mode="Modal" />
        </l:InteractionMessageTrigger>

        <!--CustomAction-->
        <l:InteractionMessageTrigger MessageKey="Show4AvalonCommand" Messenger="{Binding Messenger}">
            <!-- Window を表示するメッセージアクション -->
            <!-- AvalonDockでフローティングウィンドウ化されているときはInvokeActionOnlyWhenWindowIsActive=FalseにしないとInvokeされなくなる -->
            <b:TransitionInteraction4AvalonDockMessageAction WindowType="{x:Type local:ChildWindow}"
                                                              InvokeActionOnlyWhenWindowIsActive="False"
                                                              Mode="Modal" />
        </l:InteractionMessageTrigger>
    </i:Interaction.Triggers>

    <Grid>
        <StackPanel>
            <TextBlock TextWrapping="Wrap" 
                       Foreground="Black"
                       Text="Livetに用意されているTransitionInteractionMessageActionでは、このパネルをFloatingWindowにしたときに、メインウィンドウのほうを中心にして新規ウィンドウが表示されてしまう" />
            <Button Content="通常のTransitionInteractionMessageAction"
                    Command="{Binding ShowChildWindowCommand}"/>

            <TextBlock Margin="0 16 0 0"
                       TextWrapping="Wrap"
                       Foreground="Black"
                       Text="AvalonDock用に用意したMessageActionを使えばFloatingWindowを中心にして表示できる" />
            <Button Content="TransitionInteraction4AvalonDockMessageAction"
                    Command="{Binding ShowChildWindow4AvalonCommand}"/>
        </StackPanel>
    </Grid>
</UserControl>
